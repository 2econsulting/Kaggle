setwd("~/GitHub/2econsulting/Kaggle/R/Classification/XGB/example")
library(data.table)
setwd("~/Kaggle/santander/output")
setwd("~/Kaggle/santander/output")
library(data.table)
fread("./rb37.csv")
fread("../input/train.csv")
tmp1 <- fread("../input/train.csv")$target
unique(round(tmp1))
sgnif
signif(tmp1, 3)
signif(tmp1, 4)
min(tmp1)
signif(min(tmp1), 4)
unique(signif(tmp1, 4))
unique(signif(tmp1, 5))
unique(signif(tmp1, 6))
unique(signif(tmp1, 3))
table(unique(signif(tmp1, 3)))
table(unique(signif(tmp1, 2)))
table(unique(signif(tmp1, 1)))
options(scipen = 999)
table(unique(signif(tmp1, 1)))
options(scipen = 999)
tmp1 <- fread("../input/train.csv")$target
table(unique(signif(tmp1, 1)))
table(unique(signif(tmp1, 2)))
table(signif(tmp1, 2))
sort(table(signif(tmp1, 2)))
sort(table(signif(tmp1, 3)))
sub <- fread("./rb37.csv")
keys
keys = names(sort(table(signif(tmp1, 3))))
keys
a= which(sub$target %in% as.numeirc(keys))
a= which(sub$target %in% as.numeric(keys))
a
unique(tmp1)
a = which(sub$target %in% unique(tmp1))
sub$target[-a]
round(4324234.432423)
a = which(round(sub$target) %in% unique(round(tmp1)))
a = which(round(sub$target) %in% unique(round(tmp1)))
sub$target[-a]
sub <- fread("./rb37.csv")
tmp1 <- fread("../input/train.csv")$target
a = which(round(sub$target) %in% unique(round(tmp1)))
sub$target[-a]
sub$target[-a]
have
have = which(round(sub$target) %in% unique(round(tmp1)))
nohave = sub$target[-have]
set.seed(8)
x <- sample(10, size=10, replace=TRUE)
Closest(x, 6)
install.packages("DescTools")
library(DescTools)
set.seed(8)
x <- sample(10, size=10, replace=TRUE)
Closest(x, 6)
x
Closest(x, 6, which=TRUE)
Closest(x, c(6,5), which=TRUE)
x
Closest(x, c(6,5), which=TRUE)
unique(round(tmp1))
Closest(unique(round(tmp1)), sub$target[1])
sub$target[1]
Closest(unique(round(tmp1)), sub$target[-have][1])
sub$target[-have][1]
sub$target[-have]
sub$target[-have][1]
Closest(unique(round(tmp1)), sub$target[-have][1])
sub$target[-have][1] <- Closest(unique(round(tmp1)), sub$target[-have][1])
sub$target[-have][1]
nrow(sub$target[-have])
lenth(sub$target[-have])
length(sub$target[-have])
sub <- fread("./rb37.csv")
train <- fread("../input/train.csv")$target
sub <- fread("./rb37.csv")
train <- fread("../input/train.csv")$target
have = which(round(sub$target) %in% unique(round(train)))
nohave = sub$target[-have]
for(i in 1:length(sub$target[-have])){
sub$target[-have][i] <- Closest(unique(round(train)), sub$target[-have][i])
}
warnings
warnings()
Closest(unique(round(train)), sub$target[-have][i])
for(i in 1:100){
print(Closest(unique(round(train)), sub$target[-have][i]))
}
for(i in 1:1000){
print(Closest(unique(round(train)), sub$target[-have][i]))
}
sub$target[-have][i]
for(i in 1:10000){
print(Closest(unique(round(train)), sub$target[-have][i]))
}
warnings()
sub$target[-have][i] <-1
Closest(unique(round(train)), sub$target[-have][i])
Closest(unique(round(train)), sub$target[-have][i])[1]
sub <- fread("./rb37.csv")
train <- fread("../input/train.csv")$target
have = which(round(sub$target) %in% unique(round(train)))
nohave = sub$target[-have]
nohave
round(sub$target) %in% unique(round(train))
have = which(round(sub$target) %in% unique(round(train)))
sub <- fread("./rb37.csv")
train <- fread("../input/train.csv")$target
have = which(round(sub$target) %in% unique(round(train)))
nohave = sub$target[-have]
for(i in 1:length(sub$target[-have])){
sub$target[-have][i] <- Closest(unique(round(train)), sub$target[-have][i])[1]
}
write.csv(sub,"./rb37_w_close.csv",row.names = F)
sub <- fread("./rb37_w_close.csv")
train <- fread("../input/train.csv")$target
have = which(round(sub$target) %in% unique(round(train)))
nohave = sub$target[-have]
unique(round(train)))
unique(round(train))
min(train)
signif(30000,5)
sub$target <- signif(sub$target,5)
write.csv(sub,"./rb37_w_close_signif.csv",row.names = F)
sub
sub <- fread("./rb37_w_close.csv")
sub$target <- signif(sub$target,5)
write.csv(sub,"./rb37_w_close_signif.csv",row.names = F)
# title : homecredit_w_lightgbm
# author : jacob
# library
setwd("~/GitHub/2econsulting/Kaggle/R/Classification/LGB/example")
options(scipen = 999)
rm(list=ls())
gc(reset=TRUE)
library(rAutoFE)
library(data.table)
library(e1071)
library(caret)
library(Metrics)
library(lightgbm)
source("../tuneLGB.R")
source("../cvpredictLGB.R")
# read data
data = fread('./input/homecredit_data.csv')
test = fread('./input/homecredit_test.csv')
sample = fread('./input/sample_submission.csv')
# ..
data$SK_ID_CURR <- NULL
test$SK_ID_CURR <- NULL
names <- which(sapply(data, class) != "numeric")
data[, (names) := lapply(.SD, as.numeric), .SDcols = names]
# ..
data[is.na(data)]<- 0
test[is.na(test)]<- 0
# ------------------------
#  optimal Depth Range
# ------------------------
params <- expand.grid(
max_depth = c(2,3,4)
)
optimalDepthRange <- tuneLGB(data, y="TARGET", params=params, cv=5, max_model=nrow(params))
optimalDepthRange$scores
# ------------------------
# optimal hyper-params
# ------------------------
params <- expand.grid(
max_depth = head(optimalDepthRange$scores$max_depth, 3),
learning_rate = seq(0.01, 1, 0.3),
subsample = seq(0.6, 1, 0.9),
colsample_bytree = seq(0.5, 1, 0.1),
min_child_weight = seq(1, 40, 1),
max_delta_step = seq(1, 10, 1)
)
optimalParams <- tuneLGB(data, y="TARGET", params=params, cv=5, max_model=10)
optimalParams$scores
# ------------------------
# cvpredict catboost
# ------------------------
params = as.list(head(optimalParams$scores[names(params)],1))
output <- cvpredictLGB(data, test, k=10, y="TARGET", params=params)
output$crossvalidation_score
output$cvpredict_score
# read data
data = fread('~/Kaggle/homecredit/input/homecredit_data.csv')
test = fread('~/Kaggle/homecredit/input/homecredit_test.csv')
# read data
data = fread('~/Kaggle/homecredit/input/homecredit_data.csv')
test = fread('~/Kaggle/homecredit/input/homecredit_test.csv')
sample = fread('~/Kaggle/homecredit/input/sample_submission.csv')
bbalance <- read_csv("~/Kaggle/homecredit/input/bureau_balance.csv")
library(tidyverse)
library(xgboost)
install.packages("tidyverse")
library(tidyverse)
library(xgboost)
library(magrittr)
set.seed(0)
#---------------------------
cat("Loading data...\n")
bbalance <- read_csv("~/Kaggle/homecredit/input/bureau_balance.csv")
bbalance <- read_csv("~/Kaggle/homecredit/input/bureau_balance.csv")
bureau <- read_csv("~/Kaggle/homecredit/input/bureau.csv")
cc_balance <- read_csv("~/Kaggle/homecredit/input/credit_card_balance.csv")
payments <- read_csv("~/Kaggle/homecredit/input/installments_payments.csv")
pc_balance <- read_csv("~/Kaggle/homecredit/input/POS_CASH_balance.csv")
prev <- read_csv("~/Kaggle/homecredit/input/previous_application.csv")
tr <- read_csv("~/Kaggle/homecredit/input/application_train.csv")
te <- read_csv("~/Kaggle/homecredit/input/application_test.csv")
#---------------------------
cat("Preprocessing...\n")
fn <- funs(mean, sd, min, max, sum, n_distinct, .args = list(na.rm = TRUE))
sum_bbalance <- bbalance %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
group_by(SK_ID_BUREAU) %>%
summarise_all(fn)
rm(bbalance); gc()
sum_bureau <- bureau %>%
left_join(sum_bbalance, by = "SK_ID_BUREAU") %>%
select(-SK_ID_BUREAU) %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
group_by(SK_ID_CURR) %>%
summarise_all(fn)
library(tidyverse)
library(xgboost)
library(magrittr)
set.seed(0)
#---------------------------
cat("Loading data...\n")
bbalance <- read_csv("~/Kaggle/homecredit/input/bureau_balance.csv")
bureau <- read_csv("~/Kaggle/homecredit/input/bureau.csv")
cc_balance <- read_csv("~/Kaggle/homecredit/input/credit_card_balance.csv")
payments <- read_csv("~/Kaggle/homecredit/input/installments_payments.csv")
pc_balance <- read_csv("~/Kaggle/homecredit/input/POS_CASH_balance.csv")
prev <- read_csv("~/Kaggle/homecredit/input/previous_application.csv")
tr <- read_csv("~/Kaggle/homecredit/input/application_train.csv")
te <- read_csv("~/Kaggle/homecredit/input/application_test.csv")
#---------------------------
cat("Preprocessing...\n")
fn <- funs(mean, sd, min, max, sum, n_distinct, .args = list(na.rm = TRUE))
sum_bbalance <- bbalance %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
group_by(SK_ID_BUREAU) %>%
summarise_all(fn)
rm(bbalance); gc()
sum_bureau <- bureau %>%
left_join(sum_bbalance, by = "SK_ID_BUREAU") %>%
select(-SK_ID_BUREAU) %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
group_by(SK_ID_CURR) %>%
summarise_all(fn)
rm(bureau, sum_bbalance); gc()
sum_cc_balance <- cc_balance %>%
select(-SK_ID_PREV) %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
group_by(SK_ID_CURR) %>%
summarise_all(fn)
rm(cc_balance); gc()
sum_payments <- payments %>%
select(-SK_ID_PREV) %>%
mutate(PAYMENT_PERC = AMT_PAYMENT / AMT_INSTALMENT,
PAYMENT_DIFF = AMT_INSTALMENT - AMT_PAYMENT,
DPD = DAYS_ENTRY_PAYMENT - DAYS_INSTALMENT,
DBD = DAYS_INSTALMENT - DAYS_ENTRY_PAYMENT,
DPD = ifelse(DPD > 0, DPD, 0),
DBD = ifelse(DBD > 0, DBD, 0)) %>%
group_by(SK_ID_CURR) %>%
summarise_all(fn)
rm(payments); gc()
sum_pc_balance <- pc_balance %>%
select(-SK_ID_PREV) %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
group_by(SK_ID_CURR) %>%
summarise_all(fn)
rm(pc_balance); gc()
sum_prev <- prev %>%
select(-SK_ID_PREV) %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
mutate(DAYS_FIRST_DRAWING = ifelse(DAYS_FIRST_DRAWING == 365243, NA, DAYS_FIRST_DRAWING),
DAYS_FIRST_DUE = ifelse(DAYS_FIRST_DUE == 365243, NA, DAYS_FIRST_DUE),
DAYS_LAST_DUE_1ST_VERSION = ifelse(DAYS_LAST_DUE_1ST_VERSION == 365243, NA, DAYS_LAST_DUE_1ST_VERSION),
DAYS_LAST_DUE = ifelse(DAYS_LAST_DUE == 365243, NA, DAYS_LAST_DUE),
DAYS_TERMINATION = ifelse(DAYS_TERMINATION == 365243, NA, DAYS_TERMINATION),
APP_CREDIT_PERC = AMT_APPLICATION / AMT_CREDIT) %>%
group_by(SK_ID_CURR) %>%
summarise_all(fn)
rm(prev); gc()
tri <- 1:nrow(tr)
y <- tr$TARGET
tr_te <- tr %>%
select(-TARGET) %>%
bind_rows(te) %>%
left_join(sum_bureau, by = "SK_ID_CURR") %>%
left_join(sum_cc_balance, by = "SK_ID_CURR") %>%
left_join(sum_payments, by = "SK_ID_CURR") %>%
left_join(sum_pc_balance, by = "SK_ID_CURR") %>%
left_join(sum_prev, by = "SK_ID_CURR") %>%
select(-SK_ID_CURR) %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
mutate(na = apply(., 1, function(x) sum(is.na(x))),
DAYS_EMPLOYED = ifelse(DAYS_EMPLOYED == 365243, NA, DAYS_EMPLOYED),
DAYS_EMPLOYED_PERC = sqrt(DAYS_EMPLOYED / DAYS_BIRTH),
INCOME_CREDIT_PERC = AMT_INCOME_TOTAL / AMT_CREDIT,
INCOME_PER_PERSON = log1p(AMT_INCOME_TOTAL / CNT_FAM_MEMBERS),
ANNUITY_INCOME_PERC = sqrt(AMT_ANNUITY / (1 + AMT_INCOME_TOTAL)),
LOAN_INCOME_RATIO = AMT_CREDIT / AMT_INCOME_TOTAL,
ANNUITY_LENGTH = AMT_CREDIT / AMT_ANNUITY,
CHILDREN_RATIO = CNT_CHILDREN / CNT_FAM_MEMBERS,
CREDIT_TO_GOODS_RATIO = AMT_CREDIT / AMT_GOODS_PRICE,
INC_PER_CHLD = AMT_INCOME_TOTAL / (1 + CNT_CHILDREN),
SOURCES_PROD = EXT_SOURCE_1 * EXT_SOURCE_2 * EXT_SOURCE_3,
CAR_TO_BIRTH_RATIO = OWN_CAR_AGE / DAYS_BIRTH,
CAR_TO_EMPLOY_RATIO = OWN_CAR_AGE / DAYS_EMPLOYED,
PHONE_TO_BIRTH_RATIO = DAYS_LAST_PHONE_CHANGE / DAYS_BIRTH,
PHONE_TO_EMPLOY_RATIO = DAYS_LAST_PHONE_CHANGE / DAYS_EMPLOYED)
docs <- str_subset(names(tr), "FLAG_DOC")
live <- str_subset(names(tr), "(?!NFLAG_)(?!FLAG_DOC)(?!_FLAG_)FLAG_")
inc_by_org <- tr_te %>%
group_by(ORGANIZATION_TYPE) %>%
summarise(m = median(AMT_INCOME_TOTAL)) %$%
setNames(as.list(m), ORGANIZATION_TYPE)
rm(tr, te, fn, sum_bureau, sum_cc_balance,
sum_payments, sum_pc_balance, sum_prev); gc()
tr_te %<>%
mutate(DOC_IND_KURT = apply(tr_te[, docs], 1, moments::kurtosis),
LIVE_IND_SUM = apply(tr_te[, live], 1, sum),
NEW_INC_BY_ORG = recode(tr_te$ORGANIZATION_TYPE, !!!inc_by_org),
NEW_EXT_SOURCES_MEAN = apply(tr_te[, c("EXT_SOURCE_1", "EXT_SOURCE_2", "EXT_SOURCE_3")], 1, mean),
NEW_SCORES_STD = apply(tr_te[, c("EXT_SOURCE_1", "EXT_SOURCE_2", "EXT_SOURCE_3")], 1, sd))%>%
mutate_all(funs(ifelse(is.nan(.), NA, .))) %>%
mutate_all(funs(ifelse(is.infinite(.), NA, .))) %>%
data.matrix()
#---------------------------
cat("Preparing data...\n")
dtest <- xgb.DMatrix(data = tr_te[-tri, ])
tr_te <- tr_te[tri, ]
test = tr_te[-tri, ]
data = tr_te[tri, ]
write.csv(data,"~/Kaggle/homecredit/input/data_tidy796.csv")
write.csv(test,"~/Kaggle/homecredit/input/test_tidy796.csv")
nrow(test)
nrow(data)
nrow(tr_te)
tri
nrow(tr_te)
nrow(data)
str(tr_te)
str(tr_te[[2]])
str(tr_te[2])
tmp <- as.data.frame(tr_te)
str(tmp)
library(data.table)
library(data.table)
test = tmp[-tri, ]
data = tmp[tri, ]
fwrite(data,"~/Kaggle/homecredit/input/data_tidy796.csv",)
fwrite(data,"~/Kaggle/homecredit/input/data_tidy796.csv")
fwrite(test,"~/Kaggle/homecredit/input/test_tidy796.csv")
nrow(test)
nrow(data)
test = tmp[-tri, ]
data = tmp[tri, ]
nrow(test)
tri
str(tmp)
test = tmp[!tri, ]
data = tmp[tri, ]
nrow(test)
nrow(data)
rownames(tmp)
test = tmp[-tri, ]
nrow(test)
#tr_te <- tr_te[tri, ]
tmp <- as.data.table(tr_te)
str(tmp)
test = tmp[-tri, ]
nrow(test)
test = tmp[-tri, ,with=F]
#tr_te <- tr_te[tri, ]
tmp <- as.data.frame(tr_te)
test = tmp[-c(tri), ]
nrow(test)
str(test)
rownames(tmp)<-NULL
test = tmp[-c(tri), ]
nrow(test)
test = tmp[!c(tri), ]
nrow(test)
tri
range(tri)
head(tri)
tail(tri)
test = tmp[307511:nrow(tmp), ]
nrow(test)
str(tmp)
nrow(tr)
tr <- read_csv("~/Kaggle/homecredit/input/application_train.csv")
tri <- 1:nrow(tr)
nrow(tmp)
nrow(tr_te)
