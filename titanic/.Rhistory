# convert type
data$Sex <- as.factor(data$Sex)
data$Embarked <- as.factor(data$Embarked)
data$Pclass <- as.factor(data$Pclass)
data$SibSp <- as.numeric(data$SibSp)
data$Parch <- as.numeric(data$Parch)
# impute
data$Embarked[data$Embarked==""] <- 'S'
data$Fare[is.na(data$Fare)] <- median(data$Fare, na.rm=TRUE)
#data$Age[is.na(data$Age)] <- median(data$Age, na.rm=TRUE)
data$Age[is.na(data$Age)] <- -9999
# remove
data$Ticket <- NULL
data$Cabin <- NULL
data$PassengerId <- NULL
data$Name <- NULL
return(data)
}
# title : titanic
# authro : jacob
# library
library(rAutoFE)
library(h2o)
library(caret)
library(catboost)
library(lightgbm)
library(xgboost)
library(Matrix)
library(rjson)
source('fe_titanic.R')
source('functions.R')
source("ml/catboost.R")
source("ml/lightgbm.R")
# prepare dataset
train <- read.csv("./input/train.csv")
test <- read.csv("./input/test.csv")
test$Survived <- 9999
data <- rbind(train,test)
data <- fe_titanic(data)
train <- data[data$Survived!=9999,]
test <- data[data$Survived==9999,]
test$Survived <- NULL
# default train
cat_w_default <- train_catboost(train, ratio = c(0.6,0.2), y="Survived")
# title : fe_titanic
# author : jacob
fe_titanic <- function(data){
# nRooms
data$nRooms <- sapply(strsplit(as.character(data$Cabin)," "), length)
data$nRooms[data$nRooms==0] <- -9999
# number
data$number <- sapply(strsplit(as.character(data$Cabin)," "), function(x) gsub("[0-9]","",x[1]))
data$number[is.na(data$number)] <- -9999
data$number <- as.factor(data$number)
# letter
data$letter <- sapply(strsplit(as.character(data$Cabin)," "), function(x) gsub("[^0-9]","",x[1]))
data$letter[is.na(data$letter)] <- -9999
data$letter <- as.factor(data$letter)
# FamilySize
data$FamilySize <- data$SibSp + data$Parch + 1
# FamilyRatio
data$FamilyRatio <- (data$Parch + 1) / (data$SibSp + 1)
# Adult
data$Adult <- data$Age > 18
data$Adult[is.na(data$Adult)] <- FALSE
data$Adult <- as.factor(data$Adult)
# FamilySized
# data$FamilySized[data$FamilySize == 1] <- 'Single'
# data$FamilySized[data$FamilySize < 5 & data$FamilySize >= 2] <- 'Small'
# data$FamilySized[data$FamilySize >= 5] <- 'Big'
# data$FamilySized <- as.factor(data$FamilySized)
# isalone
# data$isalone <- ifelse(data$FamilySize == 1, T, F)
# data$isalone <- as.factor(data$isalone)
# Surname & SurnameFreq
data$Surname <- sapply(strsplit(gsub("[.,]","",data$Name), " "), function(x) x[1])
data$Surname <- as.factor(data$Surname)
# SurnameTable <- setNames(as.data.frame(table(data$Surname)),c("Surname","SurnameFreq"))
# data <- merge(data, SurnameTable, by="Surname", all.x=TRUE)
# title
data$title <- gsub("^.*, (.*?)\\..*$", "\\1", data$Name)
data$title[data$title == 'Capt'] <- 'Officer'
data$title[data$title == 'Col'] <- 'Officer'
data$title[data$title == 'Major'] <- 'Officer'
data$title[data$title == 'Jonkheer'] <- 'Sir'
data$title[data$title == 'Don'] <- 'Sir'
data$title[data$title == 'Sir'] <- 'Sir'
data$title[data$title == 'Dr'] <- 'Dr'
data$title[data$title == 'Rev'] <- 'Rev'
data$title[data$title == 'the Countess'] <- 'Lady'
data$title[data$title == 'Dona'] <- 'Lady'
data$title[data$title == 'Mme'] <- 'Mrs'
data$title[data$title == 'Mlle'] <- 'Miss'
data$title[data$title == 'Ms'] <- 'Mrs'
data$title[data$title == 'Mr'] <- 'Mr'
data$title[data$title == 'Mrs'] <- 'Mrs'
data$title[data$title == 'Miss'] <- 'Miss'
data$title[data$title == 'Master'] <- 'Master'
data$title[data$title == 'Lady'] <- 'Lady'
data$title[!data$title %in% c("Officer","Sir","Dr","Rev","Lady","Mrs","Miss","Mr","Master")] <- "ohters"
data$title <- as.factor(data$title)
# nameLength
# data$nameLength <- sapply(as.character(data$Name),function(x) nchar(x))
# data$nameLength <- as.numeric(data$nameLength)
# TicketSize
# TicketTable <- setNames(as.data.frame(table(data$Ticket)),c("Ticket","TicketSize"))
# data <- merge(data, TicketTable, by="Ticket", all.x=TRUE)
# data$TicketSize <- as.numeric(data$TicketSize)
# TicketSized
# data$TicketSized[data$TicketSize == 1]   <- 'Single'
# data$TicketSized[data$TicketSize < 5 & data$TicketSize>= 2]   <- 'Small'
# data$TicketSized[data$TicketSize >= 5]   <- 'Big'
# data$TicketSized <- as.factor(data$TicketSized)
# AgeBin
# data$AgeBin <- ifelse(data$Age<18,0, ifelse(data$Age<30,1, ifelse(data$Age<50,2,3)))
# data$AgeBin <- as.factor(data$AgeBin)
# Fare transformation
# data$FareDemean <- data$Fare - mean(data$Fare, na.rm=TRUE)
# data$FareLog <- log(data$Fare)
# hasCabin
# data$hasCabin <- ifelse(data$Cabin!="",T,F)
# data$hasCabin <- as.factor(data$hasCabin)
# convert type
data$Sex <- as.factor(data$Sex)
data$Embarked <- as.factor(data$Embarked)
data$Pclass <- as.factor(data$Pclass)
data$SibSp <- as.numeric(data$SibSp)
data$Parch <- as.numeric(data$Parch)
# impute
data$Embarked[data$Embarked==""] <- 'S'
data$Fare[is.na(data$Fare)] <- median(data$Fare, na.rm=TRUE)
#data$Age[is.na(data$Age)] <- median(data$Age, na.rm=TRUE)
data$Age[is.na(data$Age)] <- -9999
# remove
data$Ticket <- NULL
data$Cabin <- NULL
data$PassengerId <- NULL
data$Name <- NULL
return(data)
}
# title : titanic
# authro : jacob
# library
library(rAutoFE)
library(h2o)
library(caret)
library(catboost)
library(lightgbm)
library(xgboost)
library(Matrix)
library(rjson)
source('fe_titanic.R')
source('functions.R')
source("ml/catboost.R")
source("ml/lightgbm.R")
# prepare dataset
train <- read.csv("./input/train.csv")
test <- read.csv("./input/test.csv")
test$Survived <- 9999
data <- rbind(train,test)
data <- fe_titanic(data)
train <- data[data$Survived!=9999,]
test <- data[data$Survived==9999,]
test$Survived <- NULL
# default train
cat_w_default <- train_catboost(train, ratio = c(0.6,0.2), y="Survived")
# title : catboost
# author : jacob
# train_catboost
train_catboost <- function(data, ratio = c(0.6, 0.2), y){
splits  <- splitFrame(dt = data, ratio = ratio, seed = 1234)
train   <- splits[[1]]
valid   <- rbind(splits[[2]],splits[[3]])
cat(">> number of valid:", nrow(valid))
target_idx   <- which(colnames(data)==y)
cat_features <- which(sapply(train[,-target_idx], is.factor))
train_pool <- catboost.load_pool(data = train[,-target_idx], label = train[,target_idx], cat_features = cat_features)
valid_pool <- catboost.load_pool(data = valid[,-target_idx], label = valid[,target_idx], cat_features = cat_features)
fit_params <- list(
loss_function = 'Logloss',
logging_level = "Verbose",
random_seed = 1234,
eval_metric = "Accuracy",
train_dir = "./catboost",
use_best_model = T
)
ml_cat <- catboost.train(learn_pool = train_pool, test_pool = valid_pool, params = fit_params)
return(ml_cat)
}
# tune_catboost
tune_catboost <- function(data, y, max_model, cv, gridtype="small-size"){
data_x <- data[, colnames(data)[colnames(data)!=y]]
data_y <- data[, colnames(data)[colnames(data)==y]]
fit_control <- caret::trainControl(
method = "repeatedcv",
number = cv,
search = "random",
classProbs = TRUE
)
if(gridtype=="small-size"){
grid <- expand.grid(
depth = c(3, 4, 5, 7, 9, 11, 13),
learning_rate = 0.03,
l2_leaf_reg = c(0, 3),
rsm = 1,
border_count = c(32, 64),
iterations = c(50, 100, 200)
)
} else{
grid <- expand.grid(
depth = c(3, 4, 5, 7, 9, 11, 13),
learning_rate = c(0.1, 0.5, 0.01, 0.03),
l2_leaf_reg = c(0, 0.1, 0.001, 3),
rsm = c(1, 0.95, 0.9, 0.8),
border_count = c(32, 64),
iterations = c(50, 100, 200, 300)
)
}
cat <- catboost.caret
cat$type <- "Classification"
model <- caret::train(
x = data_x,
y = as.factor(make.names(data_y)),
method = cat,
metric = "Accuracy",
maximize = TRUE,
preProc = NULL,
tuneGrid = grid,
tuneLength = max_model, # max_model
trControl = fit_control
)
return(model$finalModel)
}
# catboost_cv_predict
catboost_cv_predict <- function(data, test, k, y, params, train_dir){
pred <- list()
eval <- list()
for(i in 1:k){
cat(">> fitting model:", i ,"\n")
splits  <- splitFrame(dt = data, ratio = c(0.6, 0.2), seed = i)
train   <- splits[[1]]
valid   <- rbind(splits[[2]],splits[[3]])
target_idx   <- which(colnames(data)==y)
cat_features <- which(sapply(train[,-target_idx], is.factor))
train_pool <- catboost.load_pool(data = train[,-target_idx], label = train[,target_idx], cat_features = cat_features)
valid_pool <- catboost.load_pool(data = valid[,-target_idx], label = valid[,target_idx], cat_features = cat_features)
params$train_dir <- train_dir
ml_cat <- catboost.train(
learn_pool = train_pool,
test_pool = valid_pool,
params = params
)
# eval_metric
catboost_log <- rjson::fromJSON(file=file.path(train_dir,"catboost_training.json"))
eval_metric <- max(sapply(sapply(catboost_log$iterations,"[","test"),"[",1))
eval[[i]] <- eval_metric
# predict
test_pool <- catboost.load_pool(data = test, cat_features = cat_features)
pred[[i]] <- data.frame(pred=catboost.predict(ml_cat, test_pool, prediction_type="Probability"))
}
evalDF <- data.frame(k=1:k, eval=do.call(rbind, eval))
predDF <- setNames(data.frame(do.call(cbind, pred)), paste0(rep("pred",k),1:k))
return(list(pred=predDF, eval=evalDF))
}
# title : titanic
# authro : jacob
# library
library(rAutoFE)
library(h2o)
library(caret)
library(catboost)
library(lightgbm)
library(xgboost)
library(Matrix)
library(rjson)
source('fe_titanic.R')
source('functions.R')
source("ml/catboost.R")
source("ml/lightgbm.R")
# prepare dataset
train <- read.csv("./input/train.csv")
test <- read.csv("./input/test.csv")
test$Survived <- 9999
data <- rbind(train,test)
data <- fe_titanic(data)
train <- data[data$Survived!=9999,]
test <- data[data$Survived==9999,]
test$Survived <- NULL
# default train
cat_w_default <- train_catboost(train, ratio = c(0.6,0.2), y="Survived")
train$Age <- NULL
# default train
cat_w_default <- train_catboost(train, ratio = c(0.6,0.2), y="Survived")
make_submit(pred, name="catboost75_v4")
# title : fe_titanic
# author : jacob
fe_titanic <- function(data){
# nRooms
data$nRooms <- sapply(strsplit(as.character(data$Cabin)," "), length)
data$nRooms[data$nRooms==0] <- -9999
# number
data$number <- sapply(strsplit(as.character(data$Cabin)," "), function(x) gsub("[0-9]","",x[1]))
data$number[is.na(data$number)] <- -9999
data$number <- as.factor(data$number)
# letter
data$letter <- sapply(strsplit(as.character(data$Cabin)," "), function(x) gsub("[^0-9]","",x[1]))
data$letter[is.na(data$letter)] <- -9999
data$letter <- as.factor(data$letter)
# FamilySize
data$FamilySize <- data$SibSp + data$Parch + 1
# FamilyRatio
data$FamilyRatio <- (data$Parch + 1) / (data$SibSp + 1)
# Adult
data$Adult <- data$Age > 18
data$Adult[is.na(data$Adult)] <- FALSE
data$Adult <- as.factor(data$Adult)
# FamilySized
# data$FamilySized[data$FamilySize == 1] <- 'Single'
# data$FamilySized[data$FamilySize < 5 & data$FamilySize >= 2] <- 'Small'
# data$FamilySized[data$FamilySize >= 5] <- 'Big'
# data$FamilySized <- as.factor(data$FamilySized)
# isalone
# data$isalone <- ifelse(data$FamilySize == 1, T, F)
# data$isalone <- as.factor(data$isalone)
# Surname & SurnameFreq
data$Surname <- sapply(strsplit(gsub("[.,]","",data$Name), " "), function(x) x[1])
data$Surname <- as.factor(data$Surname)
# SurnameTable <- setNames(as.data.frame(table(data$Surname)),c("Surname","SurnameFreq"))
# data <- merge(data, SurnameTable, by="Surname", all.x=TRUE)
# title
data$title <- gsub("^.*, (.*?)\\..*$", "\\1", data$Name)
data$title[data$title == 'Capt'] <- 'Officer'
data$title[data$title == 'Col'] <- 'Officer'
data$title[data$title == 'Major'] <- 'Officer'
data$title[data$title == 'Jonkheer'] <- 'Sir'
data$title[data$title == 'Don'] <- 'Sir'
data$title[data$title == 'Sir'] <- 'Sir'
data$title[data$title == 'Dr'] <- 'Dr'
data$title[data$title == 'Rev'] <- 'Rev'
data$title[data$title == 'the Countess'] <- 'Lady'
data$title[data$title == 'Dona'] <- 'Lady'
data$title[data$title == 'Mme'] <- 'Mrs'
data$title[data$title == 'Mlle'] <- 'Miss'
data$title[data$title == 'Ms'] <- 'Mrs'
data$title[data$title == 'Mr'] <- 'Mr'
data$title[data$title == 'Mrs'] <- 'Mrs'
data$title[data$title == 'Miss'] <- 'Miss'
data$title[data$title == 'Master'] <- 'Master'
data$title[data$title == 'Lady'] <- 'Lady'
data$title[!data$title %in% c("Officer","Sir","Dr","Rev","Lady","Mrs","Miss","Mr","Master")] <- "ohters"
data$title <- as.factor(data$title)
# nameLength
# data$nameLength <- sapply(as.character(data$Name),function(x) nchar(x))
# data$nameLength <- as.numeric(data$nameLength)
# TicketSize
# TicketTable <- setNames(as.data.frame(table(data$Ticket)),c("Ticket","TicketSize"))
# data <- merge(data, TicketTable, by="Ticket", all.x=TRUE)
# data$TicketSize <- as.numeric(data$TicketSize)
# TicketSized
# data$TicketSized[data$TicketSize == 1]   <- 'Single'
# data$TicketSized[data$TicketSize < 5 & data$TicketSize>= 2]   <- 'Small'
# data$TicketSized[data$TicketSize >= 5]   <- 'Big'
# data$TicketSized <- as.factor(data$TicketSized)
# AgeBin
# data$AgeBin <- ifelse(data$Age<18,0, ifelse(data$Age<30,1, ifelse(data$Age<50,2,3)))
# data$AgeBin <- as.factor(data$AgeBin)
# Fare transformation
# data$FareDemean <- data$Fare - mean(data$Fare, na.rm=TRUE)
# data$FareLog <- log(data$Fare)
# hasCabin
# data$hasCabin <- ifelse(data$Cabin!="",T,F)
# data$hasCabin <- as.factor(data$hasCabin)
# convert type
data$Sex <- as.factor(data$Sex)
data$Embarked <- as.factor(data$Embarked)
data$Pclass <- as.factor(data$Pclass)
data$SibSp <- as.numeric(data$SibSp)
data$Parch <- as.numeric(data$Parch)
# impute
data$Embarked[data$Embarked==""] <- 'S'
data$Fare[is.na(data$Fare)] <- median(data$Fare, na.rm=TRUE)
#data$Age[is.na(data$Age)] <- median(data$Age, na.rm=TRUE)
#data$Age[is.na(data$Age)] <- -9999
# remove
data$Age <- NULL
data$Ticket <- NULL
data$Cabin <- NULL
data$PassengerId <- NULL
data$Name <- NULL
return(data)
}
train <- read.csv("./input/train.csv")
test <- read.csv("./input/test.csv")
test$Survived <- 9999
data <- rbind(train,test)
data <- fe_titanic(data)
train <- data[data$Survived!=9999,]
test <- data[data$Survived==9999,]
test$Survived <- NULL
train$Age <- NULL
# default train
cat_w_default <- train_catboost(train, ratio = c(0.6,0.2), y="Survived")
# catboost_cv_predict
params <- list(
loss_function = 'Logloss',
logging_level = "Verbose",
random_seed = 1234,
eval_metric = "Accuracy",
use_best_model = T
)
output <- catboost_cv_predict(
data=train,
test=test,
k=12,
y="Survived",
params=params,
train_dir = "./catboost"
)
pred <- rowMeans(output$pred)
sum(ifelse(pred>0.5,1,0))
pred <- ifelse(pred>0.5,1,0)
make_submit(pred, name="catboost75_v4")
make_submit(pred, name="catboost75_v5")
pred <- rowMeans(output$pred)
pred
sum(ifelse(pred>0.5,1,0))
pred <- ifelse(pred>0.5,1,0)
make_submit(pred, name="catboost_cv_predict")
# title : titanic
# authro : jacob
# library
library(rAutoFE)
library(caret)
library(lightgbm)
library(xgboost)
library(Matrix)
source('fe_titanic.R')
source('functions.R')
source("ml/lightgbm.R")
# prepare dataset
train <- read.csv("./input/train.csv")
test <- read.csv("./input/test.csv")
test$Survived <- 9999
data <- rbind(train,test)
# fe_titanic
data <- fe_titanic(data)
train <- data[data$Survived!=9999,]
test <- data[data$Survived==9999,]
test$Survived <- NULL
pred
setwd("~/GitHub/Kaggle/titanic/output")
pred1 <- read.csv("./prob_LGB.csv")
pred2 <- read.csv("./prob_LGB_2.csv")
pred3 <- read.csv("./submission_catboost_cv_predict.csv.csv")
pred3 <- read.csv("./submission_catboost_cv_predict.csv")
pred3
output$pred
rowMeans(output$pred)
pred3 <- rowMeans(output$pred)
table(train$Survived)
prob.table(table(train$Survived))
prop.table(table(train$Survived))
prop.table(table(pred1$Survived))
prop.table(table(pred1$Survived>0.5))
prop.table(table(pred2$Survived>0.5))
prop.table(table(pred2$Survived>0.5))
prop.table(table(pred3$Survived>0.5))
prop.table(table(pred3>0.5))
cor(pred1,pred2)
cor(pred1$Survived,pred2$Survived)
cor(pred1$Survived,pred3)
pred1 <- read.csv("./prob_LGB.csv")$Survived
pred2 <- read.csv("./prob_LGB_2.csv")$Survived
pred3 <- rowMeans(output$pred)
prop.table(table(pred1>0.5))
prop.table(table(pred2>0.5))
prop.table(table(pred3>0.5))
cor(pred1,pred2)
cor(pred1,pred3)
data.frame(pred1,pred2,pred3)
output <-data.frame(pred1,pred2,pred3)
head(output)
output <- data.frame(pred1,pred2,pred3)
rowMeans(output)
rowMeans(output)>0.5
prop.table(table(rowMeans(output)>0.5))
sum(rowMeans(output)>0.5)
prop.table(table(pred1>0.5))
sum(rowMeans(pred1)>0.5)
sum(pred1>0.5)
sum(pred2>0.5)
sum(pred3>0.5)
sum(rowMeans(output)>0.5)
sum(rowMeans(output)>0.5)
submit <- sum(rowMeans(output)>0.5)
make_submit(submit,"ensemble_v1")
submit
submit <- rowMeans(output)>0.5
submit <- ifelse(rowMeans(output)>0.5,1,0)
make_submit(submit,"ensemble_v1")
submit
make_submit
setwd("~/GitHub/Kaggle/titanic")
make_submit(submit,"ensemble_v1")
submit <- ifelse(rowMeans(output)>0.45,1,0)
sum(submit)
submit <- ifelse(rowMeans(output)>0.49,1,0)
sum(submit)
make_submit(submit,"ensemble_v2")
submit <- ifelse(rowMeans(output)>0.48,1,0)
sum(submit)
make_submit(submit,"ensemble_v3")
